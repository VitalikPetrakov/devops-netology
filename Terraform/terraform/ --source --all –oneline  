[33mcommit 78b12205587fe839f10d946ea3fdc06719decb05[m
Author: Pam Selle <204372+pselle@users.noreply.github.com>
Date:   Mon Jan 13 16:50:05 2020 -0500

    Remove config.go and update things using its aliases

[1mdiff --git a/plugins.go b/plugins.go[m
[1m--- a/plugins.go[m
[1m+++ b/plugins.go[m
[36m@@ -16,14 +18,14 @@[m
 func globalPluginDirs() []string {[m
 	var ret []string[m
 	// Look in ~/.terraform.d/plugins/ , or its equivalent on non-UNIX[m
[31m-	dir, err := ConfigDir()[m
[32m+	dir, err := cliconfig.ConfigDir()[m
 	if err != nil {[m
 		log.Printf("[ERROR] Error finding global config directory: %s", err)[m
 	} else {[m
 		machineDir := fmt.Sprintf("%s_%s", runtime.GOOS, runtime.GOARCH)[m
 		ret = append(ret, filepath.Join(dir, "plugins"))[m
 		ret = append(ret, filepath.Join(dir, "plugins", machineDir))[m
 	}[m
 [m
 	return ret[m
 }[m

[33mcommit 52dbf94834cb970b510f2fba853a5b49ad9b1a46[m
Author: James Bardin <j.bardin@gmail.com>
Date:   Wed Aug 9 17:46:49 2017 -0400

    keep .terraform.d/plugins for discovery

[1mdiff --git a/plugins.go b/plugins.go[m
[1m--- a/plugins.go[m
[1m+++ b/plugins.go[m
[36m@@ -16,13 +16,14 @@[m
 func globalPluginDirs() []string {[m
 	var ret []string[m
 	// Look in ~/.terraform.d/plugins/ , or its equivalent on non-UNIX[m
 	dir, err := ConfigDir()[m
 	if err != nil {[m
 		log.Printf("[ERROR] Error finding global config directory: %s", err)[m
 	} else {[m
 		machineDir := fmt.Sprintf("%s_%s", runtime.GOOS, runtime.GOARCH)[m
[32m+		ret = append(ret, filepath.Join(dir, "plugins"))[m
 		ret = append(ret, filepath.Join(dir, "plugins", machineDir))[m
 	}[m
 [m
 	return ret[m
 }[m

[33mcommit 41ab0aef7a0fe030e84018973a64135b11abcd70[m
Author: James Bardin <j.bardin@gmail.com>
Date:   Wed Aug 9 10:34:11 2017 -0400

    Add missing OS_ARCH dir to global plugin paths
    
    When the global directory was added, the discovery system still
    attempted to search for OS_ARCH subdirectories. It has since been
    changed only search explicit paths.

[1mdiff --git a/plugins.go b/plugins.go[m
[1m--- a/plugins.go[m
[1m+++ b/plugins.go[m
[36m@@ -14,12 +16,13 @@[m
 func globalPluginDirs() []string {[m
 	var ret []string[m
 	// Look in ~/.terraform.d/plugins/ , or its equivalent on non-UNIX[m
 	dir, err := ConfigDir()[m
 	if err != nil {[m
 		log.Printf("[ERROR] Error finding global config directory: %s", err)[m
 	} else {[m
[31m-		ret = append(ret, filepath.Join(dir, "plugins"))[m
[32m+		machineDir := fmt.Sprintf("%s_%s", runtime.GOOS, runtime.GOARCH)[m
[32m+		ret = append(ret, filepath.Join(dir, "plugins", machineDir))[m
 	}[m
 [m
 	return ret[m
 }[m

[33mcommit 66ebff90cdfaa6938f26f908c7ebad8d547fea17[m
Author: James Bardin <j.bardin@gmail.com>
Date:   Wed May 3 22:24:51 2017 -0400

    move some more plugin search path logic to command
    
    Make less to change when we remove the old search path

[1mdiff --git a/plugins.go b/plugins.go[m
[1m--- a/plugins.go[m
[1m+++ b/plugins.go[m
[36m@@ -16,22 +14,12 @@[m
 func globalPluginDirs() []string {[m
 	var ret []string[m
[31m-[m
[31m-	// Look in the same directory as the Terraform executable.[m
[31m-	// If found, this replaces what we found in the config path.[m
[31m-	exePath, err := osext.Executable()[m
[31m-	if err != nil {[m
[31m-		log.Printf("[ERROR] Error discovering exe directory: %s", err)[m
[31m-	} else {[m
[31m-		ret = append(ret, filepath.Dir(exePath))[m
[31m-	}[m
[31m-[m
 	// Look in ~/.terraform.d/plugins/ , or its equivalent on non-UNIX[m
 	dir, err := ConfigDir()[m
 	if err != nil {[m
 		log.Printf("[ERROR] Error finding global config directory: %s", err)[m
 	} else {[m
 		ret = append(ret, filepath.Join(dir, "plugins"))[m
 	}[m
 [m
 	return ret[m
 }[m

[33mcommit 8364383c359a6b738a436d1b7745ccdce178df47[m
Author: Martin Atkins <mart@degeneration.co.uk>
Date:   Thu Apr 13 18:05:58 2017 -0700

    Push plugin discovery down into command package
    
    Previously we did plugin discovery in the main package, but as we move
    towards versioned plugins we need more information available in order to
    resolve plugins, so we move this responsibility into the command package
    itself.
    
    For the moment this is just preserving the existing behavior as long as
    there are only internal and unversioned plugins present. This is the
    final state for provisioners in 0.10, since we don't want to support
    versioned provisioners yet. For providers this is just a checkpoint along
    the way, since further work is required to apply version constraints from
    configuration and support additional plugin search directories.
    
    The automatic plugin discovery behavior is not desirable for tests because
    we want to mock the plugins there, so we add a new backdoor for the tests
    to use to skip the plugin discovery and just provide their own mock
    implementations. Most of this diff is thus noisy rework of the tests to
    use this new mechanism.

[1mdiff --git a/plugins.go b/plugins.go[m
[1m--- /dev/null[m
[1m+++ b/plugins.go[m
[36m@@ -0,0 +16,22 @@[m
[32m+func globalPluginDirs() []string {[m
[32m+	var ret []string[m
[32m+[m
[32m+	// Look in the same directory as the Terraform executable.[m
[32m+	// If found, this replaces what we found in the config path.[m
[32m+	exePath, err := osext.Executable()[m
[32m+	if err != nil {[m
[32m+		log.Printf("[ERROR] Error discovering exe directory: %s", err)[m
[32m+	} else {[m
[32m+		ret = append(ret, filepath.Dir(exePath))[m
[32m+	}[m
[32m+[m
[32m+	// Look in ~/.terraform.d/plugins/ , or its equivalent on non-UNIX[m
[32m+	dir, err := ConfigDir()[m
[32m+	if err != nil {[m
[32m+		log.Printf("[ERROR] Error finding global config directory: %s", err)[m
[32m+	} else {[m
[32m+		ret = append(ret, filepath.Join(dir, "plugins"))[m
[32m+	}[m
[32m+[m
[32m+	return ret[m
[32m+}[m
